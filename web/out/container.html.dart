// Auto-generated from container.html.
// DO NOT EDIT.

library x_container;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;

import 'package:web_ui/web_ui.dart';

class Container extends WebComponent {
  
  /** Autogenerated from the template. */
  
  /**
  * Shadow root for this component. We use 'var' to allow simulating shadow DOM
  * on browsers that don't support this feature.
  */
  var _root;
  autogenerated.Element __e15, __e8;
  autogenerated.Template __t;
  
  Container.forElement(e) : super.forElement(e);
  
  void created_autogenerated() {
    _root = createShadowRoot();
    __t = new autogenerated.Template(_root);
    _root.innerHtml = '''
    <template id="__e-8" style="display:none"></template>
    <template id="__e-15" style="display:none"></template>
    ''';
    __e8 = _root.query('#__e-8');
    __t.conditional(__e8, () => (!begun), (__t) {
      var __e7, __xContainer;
      __xContainer = new autogenerated.Element.html('<div id="x-container" class="span6">\n          <h3>New board</h3>\n          <button class="btn btn-primary pull-right" id="__e-7">Begin game</button>\n          <p>this new game has not yet started.</p>\n          <content></content>\n        </div>');
      __e7 = __xContainer.query('#__e-7');
      __t.listen(__e7.onClick, ($event) { nextturn($event); });
      __t.addAll([
        new autogenerated.Text('\n        '),
        __xContainer,
        new autogenerated.Text('\n      ')
      ]);
    });
    
    __e15 = _root.query('#__e-15');
    __t.conditional(__e15, () => (begun), (__t) {
      var __e11, __e14, __e9, __xContainer;
      __xContainer = new autogenerated.Element.html('<div id="x-container" class="span6">\n          <h3>Current board</h3>\n          <button class="btn pull-right" id="__e-9">Next turn</button>\n          <p><strong id="__e-11"></strong>.\n          <template id="__e-14" style="display:none"></template></p>\n          <content></content>\n        </div>');
      __e9 = __xContainer.query('#__e-9');
      __t.listen(__e9.onClick, ($event) { nextturn($event); });
      __e11 = __xContainer.query('#__e-11');
      var __binding10 = __t.contentBind(() => (turnCount));
      __e11.nodes.addAll([
        new autogenerated.Text('turn '),
        __binding10
      ]);
      __e14 = __xContainer.query('#__e-14');
      __t.conditional(__e14, () => (turnCount > 1), (__t) {
        
        var __binding12 = __t.contentBind(() => (turnCount-1));
        var __binding13 = __t.contentBind(() => (lastTurnDuration.inSeconds));
        __t.addAll([
          new autogenerated.Text('turn '),
          __binding12,
          new autogenerated.Text(' lasted '),
          __binding13,
          new autogenerated.Text(' seconds.')
        ]);
      });
      
      __t.addAll([
        new autogenerated.Text('\n        '),
        __xContainer,
        new autogenerated.Text('\n      ')
      ]);
    });
    
    __t.create();
  }
  
  void inserted_autogenerated() {
    __t.insert();
  }
  
  void removed_autogenerated() {
    __t.remove();
    __e15 = __e8 = __t = null;
  }
  
  void composeChildren() {
    super.composeChildren();
    if (_root is! autogenerated.ShadowRoot) _root = this;
  }
  
  /** Original code from the component. */
  
  bool begun = false;
  int turnCount = 0;
  var turnStartTime = new DateTime.now();
  var turnEndTime = new DateTime.now();
  var lastTurnDuration = new Duration();
  
  void nextturn(e, {bool reset: false}) {
    turnEndTime       = new DateTime.now();
    lastTurnDuration  = turnEndTime.difference(turnStartTime);
    turnStartTime     = turnEndTime;
    turnCount++;
    
    if (reset) {
      turnCount = 0;
    }
    if (turnCount > 0) {
      begun = true;
    }
  }
}

